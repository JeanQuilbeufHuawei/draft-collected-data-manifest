<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc [
<!ENTITY nbsp    "&#160;">
<!ENTITY zwsp   "&#8203;">
<!ENTITY nbhy   "&#8209;">
<!ENTITY wj     "&#8288;">
]>
<?xml-model href="rfc7991bis.rnc"?>
<rfc
        xmlns:xi="http://www.w3.org/2001/XInclude"
        docName="draft-ietf-opsawg-collected-data-manifest-09"
        category="std"
        ipr="trust200902"
        obsoletes=""
        updates=""
        submissionType="IETF"
        xml:lang="en"
        tocInclude="true"
        sortRefs="true"
        symRefs="true"
        version="3" >
  <front>
    <title abbrev="Telemetry Data Manifest">A Data Manifest for Contextualized Telemetry Data</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-opsawg-collected-data-manifest-09"/>
    <author fullname="Benoit Claise" initials="B" surname="Claise">
      <organization>Huawei</organization>
      <address>
        <email>benoit.claise@huawei.com</email>
      </address>
    </author>
    <author fullname="Jean Quilbeuf" initials="J" surname="Quilbeuf ">
      <organization>Huawei</organization>
      <address>
        <email>jean.quilbeuf@huawei.com</email>
      </address>
    </author>
    <author fullname="Diego R. Lopez" initials="D" surname="Lopez ">
      <organization>Telefonica I+D</organization>
      <address>
        <postal>
          <street>Don Ramon de la Cruz, 82</street>
          <city>Madrid  28006</city>
          <country>Spain</country>
        </postal>
        <email>diego.r.lopez@telefonica.com</email>
      </address>
    </author>
    <author fullname="Ignacio Dominguez" initials="I" surname="Dominguez">
      <organization>Telefonica I+D</organization>
      <address>
        <postal>
          <street>Ronda de la Comunicacion, S/N</street>
          <city>Madrid  28050</city>
          <country>Spain</country>
        </postal>
        <email>ignacio.dominguezmartinez@telefonica.com</email>
      </address>
    </author>
    <author fullname="Thomas Graf" initials="T. " surname="Graf">
      <organization>Swisscom</organization>
      <address>
        <postal>
          <street>Binzring 17</street>
          <city>Zurich</city>
          <code>8045</code>
          <country>Switzerland</country>
        </postal>
        <email>thomas.graf@swisscom.com</email>
      </address>
    </author>
    <date/>
    <area>OPS</area>
    <workgroup>OPSAWG</workgroup>
    <abstract>
      <t>
        Network platforms use Network Telemetry, such as YANG-Push, to continuously stream information, including both counters and state information.
        This document describes the metadata that ensure that the collected data can be interpreted correctly.
        This document specifies the data manifest, composed of two YANG data
        models (the platform manifest and the non-normative data collection manifest).
        These YANG modules are specified at the network level (e.g., network controllers) to provide a model that encompasses several network platforms.
        The data manifest must be streamed and stored along with the data, up to the collection and analytics systems to keep the collected data fully exploitable by the data scientists and relevant tools.
        Additionally, this document specifies an augmentation of the YANG-Push model to include the actual collection period, in case it differs from the configured collection period.
      </t>
    </abstract>
  </front>
  <middle>
    <section anchor="intro">
      <name>Introduction</name>
      <t>
        Network platforms use Network Telemetry, such as YANG-Push <xref target="RFC8641"/>, to continuously stream information, including both counters and state information.
      </t>
      <t>
        This document specifies what needs to be kept as metadata to ensure that the collected data can still be interpreted correctly throughout the collection and network analytics toolchain. When streaming YANG-structured data with YANG-Push, there is a semantic definition in the corresponding YANG module definition.
        This is the semantic information for the collected data nodes: While this semantic is absolutely required to correctly decode and interpret the data, understanding the network platform and collection environment contexts information is equally important to interpret the data.
      </t>
      <t>
        One part of this information is the actual collection period, as opposed to the configured collection period.
        On some platforms, that period can be adjusted automatically by the platform, for instance to reduce the load incurred by sending the telemetry.
        To later exploit the collected data, getting this actual collection period is crucial.
        This document defines a YANG model augmenting the YANG-Push model <xref target="RFC8641"/> to expose the actual collection period in <xref target="data-manifest-statistics-module"/>.
      </t>
      <t>
        This document introduces the data manifest, which is composed of two YANG modules, namely, the platform manifest and the data collection
        manifest, to keep the collected data exploitable by the data scientists and relevant tools.
      </t>
      <t>
        The platform manifest contains information characterizing the platform streaming the telemetry information, while the data collection manifest contains the required information to characterize how and when the telemetry information was metered.
        The platform manifest is specified in <xref target="platform-manifest"/>.
        An example of data collection manifest is specified in <xref target="data-collection-manifest"/>.
        The latter module is non-normative due to the lack of design-time schema mount in YANG, see <xref target="RFC8528" section="1"/>.
      </t>
      <t>         
        These two  YANG modules do not expose any new information but rather define what should be exposed by a platform streaming or storing telemetry data.
        Some related YANG modules have been specified to retrieve the platform capabilities such as:
      </t>
      <ul>
        <li>
          "YANG Library" <xref target="RFC8525"/>.
        </li>
        <li>
          "YANG Modules Describing Capabilities for Systems and Datastore Update Notifications" <xref target="RFC9196"/> for the platform capabilities regarding the production and export of telemetry data.
        </li>
        <li>
          <xref target="I-D.claise-netconf-metadata-for-collection"/>, which is based on <xref target="RFC9196"/> to define the optimal settings to stream specific items (i.e., per path).
        </li>
      </ul>
      <t>
        These related YANG modules are important to discover the capabilities before applying the telemetry configuration (such as on-change subscription). Some of their content is part of the context for the streamed data.
      </t>
      <t>
        This document covers only metadata about the collection context for the telemetry.
        The collected data is likely to be transformed into usable indicators for the network.
        The list of such transformation operations applied to the data is often called data lineage.
        Supplying the data lineage for the computed indicators is out of scope of this document.
      </t>
      <t>
        To retrieve the context in which a particular piece of data was collected, three elements are necessary: the time of data emission, the originating platform and the subscription through which the data arrived.
        The approach described in this document delegates the time retrieval to the database storing the collected telemetry and focusing on providing a way to match a platform and a subscription identifier to the collection context.
        This is consistent with most of the YANG modules for devices, which focus on describing the current state of the device, rather than the evolution of that state through time.
      </t>

    </section>
    <section anchor="terminology">
      <name>Terminology </name>
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
        NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
        "MAY", and "OPTIONAL" in this document are to be interpreted as
        described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
        when, and only when, they appear in all capitals, as shown here.
      </t>
      <t>
        This document reuses the term "Network Telemetry" as defined in <xref target="RFC9232"/>.
      </t>
      <t>
        Platform: equipment of the network able to produce telemetry data.
      </t>
      <t>
        Data manifest: The necessary data required to interpret telemetry information.
      </t>
      <t>
        Platform manifest: part of the data manifest that completely characterizes the platform producing the telemetry information.
      </t>
      <t>
        Data collection manifest: part of the data manifest that completely characterizes how and when the telemetry information was metered.
      </t>
      <t>
        Datapoint: an instance of data collected via Network Telemetry at a specific time.
      </t>
      <t>
        Collector: software that receives the stream of telemetry.
      </t>
    </section>
    <section anchor="use-cases">
      <name>Use Cases</name>

       <section anchor="network-analytics">
         <name>Network Analytics</name>
         <t>
           Streamed information from network platforms is used for network analytics, incident detection, and in the closed control loop for network automation.
           See <xref target="I-D.ietf-nmop-terminology"/> for definition of some of these terms.
           This streamed data can be stored in a time-series database or processed in a real-time streaming processor for further analysis.
        </t>
        <t>
          As an example, a database could store a time series representing the evolution of a specific counter collected from a network platform.
          When analyzing the data, a network operator/data scientist must understand the context information for these data:
        </t>
         <ul>
           <li>
             This counter definition, typically as defined in the YANG model.
           </li>
           <li>
             The network platform vendor, model, and OS.
           </li>
           <li>
             The collection parameters.
           </li>
         </ul>
         <t>
           Characterizing the source used for producing the data (vendor, platform, and OS) is useful to complement the data.
           As an example, knowing the exact data source software specification might reveal a particularity in the observed data, explained by a specific bug, a specific bug fix, or simply a particular specific behavior.
           This is also necessary to ensure the reliability of the collected data.
           On top of that, for YANG-Push <xref target="RFC8641"/>, it is crucial to know the set of YANG modules supported by the platform, along with their deviations.
           In some cases, there might even be some backwards incompatible changes in native modules (i.e., vendor proprietary modules) between one OS version to the next one.
           This information is captured by means of the platform manifest <xref target="platform-manifest"/>.
        </t>
         <t>
           From a collection parameters point of view, the data scientists analyzing the collected data must know whether the counter was requested from the network platform as on-change or at specific cadence <xref target="RFC8641"/>.
           Indeed, an on-change collection explains why there is a single value as opposed to a time series.
           In case of periodic collection, this exact cadence might not be observable in the time series.
           Indeed, this time series might report some values as 0 or might even omit some values.
           The reason for this behavior might be diverse: the network
           platform may be  under stress, with a too small observation period, compared to the minimum-observed-period.
           Knowing the conditions under which a counter was collected and streamed (along with the platform details) helps drawing the informed conclusions.
           As an example, some platform might report a value of 0 for counters when the collection period is too short with respect to the capabilities of the platform.
           Without context, this value of 0 might lead to a wrong conclusion that the corresponding counter dropped to zero.
        </t>
       </section>

       <section anchor="new-device-onboarding">
         <name>New Device Onboarding</name>
         <t>
           When a new device is onboarded, operators must check that the new device streams data (e.g., with YANG-Push),
           that the Network Telemetry data is the right one, that the data is correctly collected at the data collection,
           and finally that the data can be analyzed (compared with other similar devices).
           For the last point, the data manifest, which must be linked to the data up to the collection and analytics system,
           contains the relevant information.
        </t>
       </section>

      <section anchor="data-mesh-principles-in-networking" >
        <name>Data Mesh Principles in Networking</name>
        <t>
           The concept behind the data mesh <xref target="DataMesh"/> are:
        </t>
        <ul>
          <li>
            Domain Ownership: Architecturally and organizationally align business, technology, and analytical data, following the line of responsibility.
            The Data Mesh principles adopt the boundary of bounded context to individual data products where each domain is responsible for (and owns) its data and models.
          </li>
          <li>
            Data as a Product: The "Domain" owners are responsible to provide the data in useful way (discoverable through a catalog, addressable with a permanent and unique address, understandable with well-defined semantics, trustworthy and truthful, self-describing for easy consumption, interoperable by supporting standards, secure, self-contained, etc.) and should treat consumers of that data as customers.
            It requires and relies on the "Domain Ownership" principle.
          </li>
          <li>
            Self-serve Data Platform: This fosters the sharing of cross-domain data to create extra value.
          </li>
          <li>
            Federated Computational Governance: Describes the operating model and approach to establishing global policies across a mesh of data products.
          </li>
        </ul>
        <t>
          The most relevant concept for this document is the "Data as a Product" principle. The data manifest fulfills this principle as the two YANG data models, platform manifest and the data collection manifest, along with the data, provide all the necessary information in a self-describing way for easy consumption.
        </t>
       </section>
    </section>

    <section anchor="data-manifest-statistics-module">
      <name>The "ietf-yp-current-period" YANG module</name>
      <t>
        Some platforms will adjust the collection period depending on their capabilities and current load.
        The YANG module in this section augments the "ietf-subscribed-notification" module to provide the "current-period" leaf.
        The value of this leaf indicates the current collection which might be different from the configured collection period.
      </t>
      <t>
        <xref target="current-period-tree"/> contains the YANG tree diagram <xref target="RFC8340"/> of the "ietf-yp-current-period" module.
      </t>
      <figure anchor="current-period-tree" >
        <name>YANG tree diagram for "ietf-yp-current-period" module</name>
        <artwork type="ascii-art"><![CDATA[
{{current_period_tree}}
     ]]></artwork>
      </figure>
      <t>
        The code of the "ietf-yp-current" YANG module is given below.
      </t>
      <sourcecode name="ietf-yp-current-period@2025-02-21.yang" type="yang" markers="true"><![CDATA[
{{data_collection_manifest_statistics}}
    ]]>
      </sourcecode>
    </section>
    <section anchor="platform-manifest">
      <name>Platform Manifest</name>
        <section anchor="platform-manifest-model-tree">
          <name>Overview of the Model</name>
          <t>
            <xref target="platform-manifest-tree"/> contains the YANG tree diagram of the "ietf-platform-manifest module".
          </t>
          <figure anchor="platform-manifest-tree">
            <name>YANG tree diagram for ietf-platform-manifest module</name>
            <artwork type="ascii-art"><![CDATA[
{{platform_manifest_tree}}
            ]]></artwork>
          </figure>
        <t>
          The YANG module contains a list of platform manifests (in 'platforms/platform'), indexed by the identifier of the platform.
          That identifier should be defined by the network manager so that each platform emitting Network Telemetry has a unique identifier.
          There are several documents about managing the inventory of the network, e.g., <xref target="I-D.ietf-ivy-network-inventory-yang"/>.
          The platform identifier should be the same as the identifier used in inventories or the 'node-id' in <xref target="RFC8345"/>.
          As an example, the identifier could be the 'sysName' from <xref target="RFC3418"/>.
          The scope of the "ietf-platform-manifest" module is the scope of the data collection, i.e., a given network, therefore it contains a collection of platform manifests, as opposed to the device scope, which would contain a single platform manifest.
        </t>

        <t>
          The platform manifest is characterized by a set of parameters ('name', 'software-version', 'software-flavor', 'os-version', and 'os-type') that are aligned with the YANG Catalog <xref target="I-D.clacla-netmod-model-catalog"/> so that the YANG Catalog could be used to retrieve the YANG modules a posteriori.
          The vendor of the platform can be identified via its name 'vendor' or its PEN number 'vendor-pen', as described in <xref target="RFC9371"/>.
        </t>
        <t>
          The platform manifest also includes the contents of the YANG Library <xref target="RFC8525"/>.
          That module set is particularly useful to retrieve the YANG modules associated to a subscription by analyzing the xpath filters or the subtree filters.
          Xpath filters are based on module names (see <xref target="RFC8639"/>, description of leaf 'stream-xpath-filter', page 45).
          Subtree filters are based on namespaces.
        </t>
      </section>
      <section anchor="platform-manifest-model">
        <name>"ietf-platform-manifest" YANG module</name>
        <t>
          This section defines the "ietf-platform-manifest" YANG module.
        </t>
        <sourcecode name="ietf-platform-manifest@2025-02-21.yang" type="yang" markers="true"><![CDATA[
{{platform_schema_mount}}
            ]]>
        </sourcecode>
      </section>
    </section>

    <section anchor="data-collection-manifest">
      <name>Data Collection Manifest</name>
      <t> This section is non-normative.</t>
      <section anchor="model-tree">
        <name>Overview of the Model</name>
        <t>
          <xref target="data-collection-manifest-tree"/> contains the YANG tree diagram <xref target="RFC8340"/> of the "example-collection-manifest" module.
          The module relies upon the YANG Schema mount <xref target="RFC8528"/> to reuse existing YANG modules describing the current data collection status.
          This module is an example, i.e. non-normative, as YANG Schema mount does not support design-time schema mount.
          <xref target="schema-mount-version"/> explains how the YANG tree is obtained.
        </t>
        <figure anchor="data-collection-manifest-tree">
          <name>YANG tree diagram for example-collection-manifest module</name>
          <artwork type="ascii-art"><![CDATA[
{{data_collection_manifest_tree}}
              ]]></artwork>
        </figure>
        <t>
          The 'data-collections' container contains the information related to each YANG-Push subscription.
          As for the platform manifest, these subscriptions are indexed by the 'platform-id', so that all subscriptions in the network can be represented at the network level without any conflict.
        </t>
        <t>
          As most of the information related to YANG-push subscription
          <xref target="RFC8639"/> and <xref target="RFC8641"/> is stored in the "ietf-yang-push" module, these modules are mounted.
          These modules have a part common to all subscriptions of the platform, stored in the 'streams' and 'filters' containers.
          The information about subscriptions themselves are stored in the 'subscriptions/subscription' list, indexed by a subscription identifier.
        </t>
        <t>
          In the subscription object, the 'current-period' indicates the period currently used between two updates.
          That leaf can only be present when the subscription is periodic.
          The current period might differ from the requested period if the platform implements a mechanism to increase the collection period when it is overloaded.
          Having the current period information is crucial to understand if telemetry is missing because of a bug or a packet loss or simply because it was dynamically adjusted by the platform.
        </t>
        <t>
          The 'current-period' data node is added by the module 'ietf-data-collection-manifest-statistics' presented in <xref target="data-manifest-statistics-module"/>.
          This module augments the subscription list from the module 'ietf-subscribed-notifications'.
          It is mounted as well via the YANG Schema Mount mechanism.
          The module for the data collection manifest is presented in <xref target="module-code"/>.
        </t>
      </section>
      <section anchor="module-code">
        <name>The "example-collection-manifest" YANG module</name>
        <t>
          This section includes the code of the "example-collection-manifest" YANG module.
          Additionally, it defines the extension data file for YANG schema mount.
          The data collection manifest should conform to the model obtained by combining these two specifications.
        </t>
        <sourcecode name="example-collection-manifest@2025-02-21.yang"
                    type="yang"><![CDATA[
{{data_collection_manifest_yang}}
    ]]>
        </sourcecode>
      </section>
    </section>
    <section anchor="mapping" >
      <name>Data Manifest and the Collected Data</name>
      <t>
        This section focuses on associating the collected data to the data manifest.
        As this document specifically focuses on giving context on data collected via Network Telemetry, it is assumed that a Network Telemetry system is available.
        Another premise of this document is the storage of the collected data into a database for later exploitation.
        This document assumes that such a database exists and can be used for storing the data manifest.
      </t>
      <section anchor="collecting_dm">
        <name>Collecting the Data Manifest</name>
        <t>
          The data manifest MUST be streamed and stored along with the collected data.
          In case the collected data are moved to a different place (typically a database), the companion data manifest MUST follow the collected data.
          Storing the collected data without the companion data manifest might prevent the correct interpretation of the collected data.
          The data manifest MUST be updated when the data manifest information changes, for example, when a router is upgraded, when a new Network Telemetry subscription is configured, or when the Network Telemetry subscription parameters change.
          The data manifest can itself be considered as a time series, and stored in a similar fashion to the collected data.
        </t>
        <t>
          This document recommends reusing existing Network Telemetry systems (in-band approach) to lower the efforts for implementing this approach.
          To enable a platform supporting Network Telemetry to also support the data manifest, it is sufficient that this platform supports
          the models from Sections <xref target="platform-manifest" format="counter"/> and <xref target="data-collection-manifest" format="counter"/>.
          The collection of the data manifest MUST be explicitly configured by the collector by requesting the relevant subscriptions.
          These subscriptions MUST include the platform manifest and the data collection manifest, possibly limited to the subscriptions for which the context needs to be retrieved a posteriori.
          <xref target="inband-example"/> shows how the in-band approach would work while storing to a time series database.
        </t>
        <t>
          Each type of manifest has its own rough frequency update, i.e., at reboot for the platform manifest and when subscriptions are modified for the data collection manifest.
          The data manifest SHOULD be streamed with the YANG-Push on-change feature <xref target="RFC8641"/> (also called event-driven telemetry) whenever possible.
        </t>
        <t>
          A platform manifest is likely to remain the same until the platform is updated.
          Thus, the platform manifest only needs to be collected once per streaming session and updated after a platform reboot.
          The "subscription-terminated" (<xref target="RFC8639" section="2.7.3"/>) will indicate to the collector that the platform rebooted.
          The collector MUST then collect the potential update of the platform manifest on re-establishment of the subscription.
          Using the on-change feature enables to capture dynamic changes to the platform manifest as well, if any.
        </t>
        <t>
          Regarding the data manifest, the elements common to all subscriptions, such as the stream definitions and the common filters might be updated less frequently than the subscriptions.
          Relying on YANG-Push on-change feature enables keeping an up-to-date version of the data collection manifest.
        </t>
        <t>
          The underlying time series database should accommodate the various rates at which different parts of the data manifest are updated.
          In particular, storing the platform manifest should be optimized to avoid duplicating repeated content and only storing a new version when there is a change in the manifest.
        </t>
      </section>

      <section anchor="mapping_dm">
        <name>Mapping Collected Data to the Data Manifest</name>
        <t>
          As explained in the introduction, three elements are necessary to identify the data manifest associated to a datapoint:
        </t>
        <ul>
          <li>the time at which the data was sent from the device, </li>
          <li>the originating platform sending the data, and</li>
          <li>the identifier of the subscription that produced the data.</li>
        </ul>
        <t>
          These elements can be either known to the collector, if it is the
          one configuring the collection, or retrieved via dedicated headers as proposed, e.g., in <xref target="I-D.netana-netconf-notif-envelope"/>.
          To enable a posteriori retrieval of the data manifest associated to a datapoint, the collector MUST keep the subscription identifier and platform identifier in the metadata of the collected values.
        </t>
        <t>
          With these three elements, to retrieve the data manifest from a datapoint, the following happens:
        </t>
        <ul>
          <li>The subscription identifier, platform identifier and timestamp of the data are retrieved from the datapoint metadata</li>
          <li>The platform manifest for that datapoint is obtained by looking up the latest version before the timestamp matching the platform identifier.</li>
          <li>The data collection manifest for that datapoint is obtained by looking up the latest version before the timestamp matching the platform identifier and the subscription identifier.</li>
        </ul>
        <t>
          The reliability of the collection of the data manifest is the same as the reliability of the data collection itself, since the data manifest is like any other data.
        </t>
      </section>
    </section>
    <section anchor="operational-considerations">
      <name>Operational Considerations</name>
       <t>
         The data manifest is partially standardized in this document since only the platform manifest has a normative YANG module.
         <xref target="model-tree"/> explains why the data collection manifest cannot be normative at the current time.
         In practice, the data collection manifest might be difficult to implement due to the dependency on YANG Schema Mount and the lack of normative YANG module.
         In that case, the solution proposed in the next paragraph covers the creation of the data collection manifest.
       </t>
       <t>
         It is expected that the data manifest is streamed directly from the network equipment, along with YANG-Push <xref target="RFC8641"/> data.
         However, if the equipment Network Telemetry does not yet support the YANG modules from the data manifest specified in this document, the telemetry collector could populate the data manifest from available information collected from the platform.
         This latter option requires efforts on the Network Telemetry data collection side, as the information gathered in the data manifest proposed in this document could be scattered among various standard and vendor-specific YANG modules <xref target="RFC8199"/>, that depend on the platform.
       </t>
       <t>
         The current approach relies on the sysname for identifying the various platform, which identifies a role rather than a particular piece of hardware.
         As a consequence, there is no simple solution for obtaining the data manifest of a given piece of hardware reused for different roles in the same network.
         In general, the problem of having consistent metadata among various protocols is still an open problem as detailed in <xref target="I-D.boucadair-nmop-rfc3535-20years-later" section="4.10"/>.
       </t>
    </section>
    <section anchor="example">
      <name>Example</name>
      <t>
        <xref target="manifest-example"/> shows an example of both a Platform manifest and corresponding data collection manifests.
        The list of YANG modules in the 'yang-library' container is kept empty for brevity.
      </t>
      <figure anchor="manifest-example">
        <name>Example of data manifest</name>
        <artwork><![CDATA[
{{data_collection_manifest_example}}
  ]]></artwork>
      </figure>
      <t>
        <xref target="manifest-example"/> contains the data collection manifest for two XPaths subscriptions.
        With the data collection manifest for the first one, with subscription identifier 4242, the exact semantics of the collected path, here the administrative status of the network interfaces, can be obtained by looking up the module in the yang-library of the corresponding platform manifest, to obtain the exact revision of ietf-interfaces used at collection time.
        Also, the "on-change" container indicates that data will be sent only if there is a change, thus not receiving data indicates that the administrative status of the interface did not change.
      </t>
      <t>
        The other example of data collection manifest, with subscription identifier 4243, shows how a periodic subscription is reported.
        In that example, the 'current-period' indicates that the requested period of 10s (1000 centiseconds) could not be attained and is now of 20s, for instance because the device is overloaded.
      </t>
      <t>
        <xref target="validate-example"/> gives the command line for validating this example using <xref target="yanglint"/>.
      </t>
    </section>
    <section anchor="security">
      <name>Security Considerations</name>
      <t>
        This section is modeled after the template described in <xref target="I-D.ietf-netmod-rfc8407bis" section="3.7"/>.
      </t>
      <t>
        The "ietf-platform-manifest" module defines a data model that is designed to be accessed via YANG-based management protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF<xref target="RFC8040"/>.
        These protocols have to use a secure transport layer (e.g., SSH <xref target="RFC6242"/>, TLS <xref target="RFC8446"/> and QUIC <xref target="RFC9000"/>) and have to use mutual authentication.
      </t>
      <t>
        The Network Configuration Access Control Model (NACM) <xref target="RFC8341"/> provides the means to restrict access for particular NETCONF or RESTCONF users to a preconfigured subset of all available NETCONF or RESTCONF protocol operations and content.
      </t>
      <t>
        Some of the readable data nodes in this YANG module may be considered sensitive or vulnerable in some network environments.
        It is thus important to control read access (e.g., via get, get-config, or notification) to these data nodes. Specifically, the following subtrees and data nodes have particular sensitivities/ vulnerabilities:
      </t>
      <ul>
        <li>
          <tt>platforms/platform</tt> contains details about the platform that an attacker could use to find the known vulnerabilities of the platform.
        </li>
      </ul>
      <t>
        The "ietf-yp-current-period" module defines a data model that is designed to be accessed
        via YANG-based management protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF<xref target="RFC8040"/>.
        These protocols have to use a secure transport layer (e.g., SSH <xref target="RFC6242"/>, TLS <xref target="RFC8446"/> and QUIC <xref target="RFC9000"/>) and have to use mutual authentication.
      </t>
      <t>
        The Network Configuration Access Control Model (NACM) <xref target="RFC8341"/> provides the means to restrict access for particular NETCONF or RESTCONF users to a preconfigured subset of all available NETCONF or RESTCONF protocol operations and content.
      </t>
      <t>
        Some of the readable data nodes in this YANG module may be considered sensitive or vulnerable in some network environments.
        It is thus important to control read access (e.g., via get, get-config, or notification) to these data nodes.
        Specifically, the following subtrees and data nodes have particular sensitivities/ vulnerabilities:
      </t>
      <t>
        There are no particularly sensitive readable data nodes.
      </t>
      <t>
        As the present approach reuses an existing telemetry system, the security considerations lie with the new content divulged in the new manifests.
        Appropriate access control filters must be associated to the corresponding leafs and containers, as well as the databases storing them.
      </t>
      <t>
        The integrity and provenance of the data of the collection manifest can be ensured by a signing mechanism such as <xref target="I-D.lopez-opsawg-yang-provenance"/>.
      </t>
    </section>
    <section anchor="iana">
      <name>IANA Considerations</name>
      <t>RFC Ed.: replace XXXX with actual RFC number and remove this note.</t>
      <t>
        IANA is requested to register the following URIs in the "ns" subregistry within the "IETF XML Registry" <xref target="RFC3688"/>:
      </t>
      <artwork>
 URI: urn:ietf:params:xml:ns:yang:ietf-platform-manifest
 Registrant Contact:  The IESG.
 XML: N/A; the requested URI is an XML namespace.

 URI: urn:ietf:params:xml:ns:yang:ietf-yp-current-period
 Registrant Contact:  The IESG.
 XML: N/A; the requested URI is an XML namespace.
      </artwork>
      <t>
        IANA is requested to register the following YANG modules in the "YANG Module Names" subregistry <xref target="RFC6020"/> within the "YANG Parameters" registry.
      </t>
      <artwork>
 Name: ietf-platform-manifest
 Maintained by IANA?  N
 Namespace: urn:ietf:params:xml:ns:yang:ietf-platform-manifest
 Prefix: p-mf
 Reference: RFC XXXX

 Name: ietf-yp-current-period
 Maintained by IANA?  N
 Namespace: urn:ietf:params:xml:ns:yang:ietf-yp-current-period
 Prefix: yp-cp
 Reference: RFC XXXX
      </artwork>
    </section>
    <section>
      <name>Contributors</name>
    </section>
    <section removeInRFC="true">
      <name>Open Issues</name>
        <ul>
          <li>
            Do we want to handle the absence of values, i.e. add information about missed collection or errors in the collection context ? It could also explain why some values are missing. On the other hand, this might also be out scope.
            CLOSED: the goal of the manifest is to be able to detect miscollection a posteriori.
            Assurance of the metric collection is out of scope and could be
            done via an external mechanism such as SAIN.
          </li>
          <li>
            Henk: how does this interact with SBOM effort?
            CLOSED: SBOM is another kind of manifest, we are focusing here on data collection.
          </li>
          <li>
            What is the link with the RFC8345 NodeId and IVY?
            CLOSED: added text.
          </li>
          <li>
            Handling of deletion in <xref target="I-D.kll-yang-label-tsdb"/>.
            CLOSED: out of scope
          </li>
        </ul>
    </section>
  </middle>
  <back>
    <references title="Normative References">
      <xi:include href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
      <xi:include href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.6241.xml"/>
      <xi:include href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.6242.xml"/>
      <xi:include href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8040.xml"/>
      <xi:include href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
      <xi:include href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8341.xml"/>
      <xi:include href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8446.xml"/>
      <xi:include href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8525.xml"/>
      <xi:include href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8528.xml"/>
      <xi:include href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8639.xml"/>
      <xi:include href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8641.xml"/>
    </references>
    <references title="Informative References">
      <xi:include href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.3418.xml"/>
      <xi:include href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.3688.xml"/>
      <xi:include href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.6020.xml"/>
      <xi:include href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8199.xml"/>
      <xi:include href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8340.xml"/>
      <xi:include href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8343.xml"/>
      <xi:include href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8345.xml"/>
      <xi:include href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.9000.xml"/>
      <xi:include href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.9196.xml"/>
      <xi:include href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.9232.xml"/>
      <xi:include href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.9371.xml"/>
      <xi:include href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.clacla-netmod-model-catalog.xml"/>
      <xi:include href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.claise-netconf-metadata-for-collection.xml"/>
      <xi:include href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.netana-netconf-notif-envelope.xml"/>
      <xi:include href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.lopez-opsawg-yang-provenance.xml"/>
      <xi:include href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.kll-yang-label-tsdb.xml"/>
      <xi:include href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-ivy-network-inventory-yang.xml"/>
      <xi:include href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-nmop-terminology.xml"/>
      <xi:include href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-netmod-rfc8407bis.xml"/>
      <xi:include href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.boucadair-nmop-rfc3535-20years-later.xml"/>
      <reference anchor="DataMesh" target="https://www.datamesh-architecture.com/">
        <front>
          <title>Datamesh Architecture</title>
          <author/>
        </front>
      </reference>
      <reference anchor="yanglint" target="https://github.com/CESNET/libyang">
        <front>
          <title>Yanglint</title>
          <author/>
        </front>

      </reference>
    </references>
    <?rfc needLines="100"?>
    <section removeInRFC="true">
      <name>Changes between revisions</name>
      <t>v08 -> v09 </t>
      <ul>
        <li>Removed unused ref, move 9232 to informational</li>
      </ul>
      <t>v07 -> v08 </t>
      <ul>
        <li>Address comments from Thomas</li>
      </ul>
      <t>v06 -> v07 </t>
      <ul>
        <li>Operational +(and management) considerations (draft-opsarea-rfc5706bis)</li>
        <li>Make current period config false</li>
        <li>Explicit that data collection is non-normative</li>
        <li>Adjust security section to RFC8407bis new template</li>
        <li>Other comments from Med</li>
      </ul>
      <t>v05 -> v06 </t>
      <ul>
        <li>Example can be validated using yanglint</li>
        <li>Applied details comments from Joe and Med</li>
        <li>Making the "current-period" update more generic and mentioning it in the introduction</li>
        <li>Section 7 (previously 5) reworked to clarify how data manifest is collected and retrieved from a datapoint</li>
        <li>Remove use of YANG schema mount for the platform manifest and change data collection manifest to example</li>
      </ul>
      <t>v04 -> v05 </t>
      <ul>
        <li>Remove references to full-include draft, use schema mount.</li>
        <li>Explain link with schema node id</li>
      </ul>
      <t>v03 -> v04 </t>
      <ul>
        <li>State that data lineage is out of scope</li>
        <li>Replace copy-pasted version of the modules with schema mount version, use full-embed for the "real" one</li>
        <li>Schema mount version is the fallback plan if full:embed is not there fast enough.</li>
        <li>Update examples accordingly</li>
      </ul>
      <t>v02 -> v03 </t>
      <ul>
        <li>Explicit that modules are network (Controller) level</li>
        <li>InfluxDB example changed to TSDB example aligned with <xref target="I-D.kll-yang-label-tsdb"/></li>
        <li>Minor edits i.e. network element -> platform , object -> data node</li>
      </ul>
      <t> v01 -> v02 </t>
      <ul>
        <li>Updated example with latest version of the model.</li>
      </ul>
      <t>
        v00 (WG adoption) - v01
      </t>
      <ul>
        <li>Solve integrity issue by delegating to <xref target="I-D.lopez-opsawg-yang-provenance"/>.</li>
      </ul>
      <t>
        v05 -> v06
      </t>
      <ul>
        <li> Remove YANG packages </li>
        <li> Switch YANG models from device view to network view </li>
        <li> Add PEN number to identify vendors </li>
        <li> Intro rewritten with uses cases</li>
        <li> Added an "Operational Considerations" section </li>
        <li> Switch from MDT to YANG-push</li>
      </ul>
      <t>
        v04 -> v05
      </t>
      <ul>
        <li> First version of example scenario</li>
        <li> Updated affiliation</li>
        <li> Updated YANG module names to ietf-platform-manifest and ietf-data-collection-manifest </li>
        <li> Unify used terms as defined in the terminology section</li>
        <li> Replaced 'device' with 'platform' </li>
        <li> Split Section 5 into two sections for better readibility</li>
      </ul>
      <t>
        v03 -> v04
      </t>
      <ul>
        <li> Fix xym error</li>
        <li> Moved terminology after introduction</li>
        <li> Clarified the role of the module</li>
      </ul>
      <t>
        v02 -> v03
      </t>
      <ul>
        <li> Add when clause in YANG model</li>
        <li> Fix validation errors on YANG modules</li>
        <li> Augment YANG library to handle semantic versioning</li>
      </ul>
      <t>
        v01 -> v02
      </t>
      <ul>
        <li> Alignment with YANGCatalog YANG module: name, vendor </li>
        <li> Clarify the use of YANG instance file </li>
        <li> Editorial improvements </li>
      </ul>
      <t>
        v00 -> v01
      </t>
      <ul>
        <li> Adding more into data platform: yang packages, whole yanglib module to specify datastores </li>
        <li> Setting the right type for periods: int64 -> uint64 </li>
        <li> Specify the origin datastore for mdt subscription </li>
        <li> Set both models to config false </li>
        <li> Applying text comments from Mohamed Boucadair </li>
        <li> Adding an example of data-manifest file </li>
        <li> Adding rationale for reusing telemetry system for collection of the manifests </li>
        <li> Export manifest with on change telemetry as opposed to YANG instance file </li>
      </ul>
      <t>
        v00
      </t>
      <ul>
        <li> Initial version </li>
      </ul>
    </section>
    <section anchor="inband-example">
      <name>An Example of Use Based on MDT</name>
      <t>
        In this example, the goal is to collect the administrative status and number of received bytes for the interfaces of a fictional ACME device, and store the result in a time-series database.
        The metrics are collected using YANG-Push, which is configured by specifying their XPaths and when they should be collected (periodically or on-change).
        More precisely, the Xpaths to collect are "ietf-interfaces:interfaces/interface/enabled" on every change and "ietf-interfaces:interfaces/interface/statistics/in-octets" every 100 milliseconds.
        The paths here are referring to the YANG module from <xref target="RFC8343"/>.
        The configuration of YANG push is out of scope for this document.
        Since they don’t have the same trigger, each of the path must be collected in its own subscription.
        <xref target="collection_example"/> presents an example for such a collection.
      </t>
      <figure anchor="collection_example">
        <name>Example of Collection From a Device to a TSDB</name>
        <artwork type="ascii-art"><![CDATA[
     +------------+                +--------+
     |   MDT      |--------------> |  TSDB  |
     | Collector  |                +--------+
     +------------+
          ^
          |
          |
      +---------+
      | Device  |
      +---------+
          ]]></artwork>
      </figure>
      <t>
        In the scenario depicted in <xref target="collection_example"/>, the collector receives YANG-push data from the device and stores it into a time series database (TSDB).
        This section first presents a version without data manifest and then how to enrich it with the data manifest.
      </t>
      <t>
        Examples rely on the notation from <xref target="I-D.kll-yang-label-tsdb"/> to represent how the data is stored in the TSDB.
        Without the data manifest, the result of the collection would be stored as showed in <xref target="influx_before"/>.
        The "host" label indicates the devices from which the data is collected and the YANG keys are included as well.
        Here the interface "eth0" is enabled and received 1234 octets.
        In that case, the value is stored, without any way to know how the value was obtained.
      </t>
      <figure anchor="influx_before">
          <name>Storing Datapoints without Data Manifest</name>
          <artwork type="ascii-art"><![CDATA[
 * Metric: interfaces_interface_enabled
 * Value: True
 * Labels:
   - host: "PE1"
   - interfaces_interface_name: "eth0"
--
 * Metric: interfaces_interface_statistics_in_octets
 * Value: 1234
 * Labels:
   - host: "PE1"
   - interfaces_interface_name: "eth0"
          ]]></artwork>
      </figure>
      <t>
        An option for keeping the data manifest with the data is to store it directly into the TSDB.
        In that case, the collector can subscribe to the data exported by the module presented in this document and store it as other metrics.
        For the platform manifest, assuming the platform identifier is "PE1", the collector subscribes to the path "ietf-platform-manifest:platforms/platform[id=PE1]".
        For the data collection manifests, the collector subscribes to the path "ietf-data-collection-manifest:data-collections/data-collection[platform-id="PE1"]/yang-push-collection/subscriptions/subscription[id=X]" where X is the subscription identifier of existing subscriptions.
        With the approach from <xref target="I-D.kll-yang-label-tsdb"/>, the corresponding subtrees would be split into a set of datapoints, one per leaf.
        <xref target="influx_manifest"/> shows two examples of storing leaves in a TSDB.
        The first leaf is the vendor PEN number, which is part of the platform manifest.
        The second leaf is the Xpath filter used for subscription to the interface status.
      </t>
      <figure anchor="influx_manifest">
        <name>Example of storing Platform and Data Collection Manifest: Vendor PEN and Xpath filter.</name>
        <artwork><![CDATA[
 * Metric: platforms_platform_vendor_pen
 * Value: 32473
 * Labels:
   - host: "PE1"
   - platforms_platform_id: "PE1"
--
 * Metric: data_collections_data_collection_yang_push_collection_
           subscriptions_subscription_datastore_xpath_filter
 * Value: "ietf-interfaces:interfaces/interface/enabled"
 * Labels:
   - host: "PE1"
   - data_collections_data_collection_platform_id: "PE1"
   - data_collections_data_collection_yang_push_collection_
     subscriptions_subscription_id: 4242
         ]]></artwork>
      </figure>
      <t>
          In the labels, the "host" might be different from the "platforms_platform_id" in case the collector is the one assembling it, i.e. for devices that do not natively support the data manifest.
          In that case, the value of this label could be the hostname of the collector.
          The host value does not matter for retrieving the data manifest as the platform identifier is the meaningful field.
      </t>
      <t>
        In this example, retrieving the platform manifest associated to a collected datapoint is done by looking for datapoints that have the label "platforms_platform_id" equal to the value of the host for that collected datapoint.
        In order to link a datapoint with the corresponding data collection manifest, an additional label for the subscription identifier is required.
        For instance, the same datapoints as in <xref target="influx_before"/> could be stored as in <xref target="influx_after"/>.
      </t>
      <figure anchor="influx_after">
        <name>Storing datapoints with information to retrieve the data manifest</name>
        <artwork type="ascii-art"><![CDATA[
 * Metric: interfaces_interface_enabled
 * Value: True
 * Labels:
   - host: "PE1"
   - interfaces_interface_name: "eth0"
   - data_collections_data_collection_yang_push_subscriptions_
     subscription_id: 4242
--
 * Metric: interfaces_interface_statistics_in_octets
 * Value: 1234
 * Labels:
   - host: "PE1"
   - interfaces_interface_name: "eth0"
   - data_collections_data_collection_yang_push_subscriptions_
     subscription_id: 4243
          ]]></artwork>
      </figure>
      <t>
        From the "interfaces_interface_enabled" datapoint, one can retrieve the corresponding data collection manifest by looking for datapoints that have the label data_collections_data_collection_yang_push_collection_subscriptions_subscription_id equal to 4242.
      </t>
      <t>
        Various optimizations could be done, such as relying on on-change subscription to modify only the leaves that changed.
        In that way, the amount of data needed for updating and storing the data manifest in the TSDB would be limited.
      </t>

    </section>
    <section anchor="schema-mount-version">
      <name>Generating YANG Tree Diagrams</name>
      <t>
        This section provides the files needed to generate the YANG tree diagram <xref target="RFC8340"/> from  <xref target="data-collection-manifest-tree"/>.
        The diagram was obtained using yanglint <xref target="yanglint"/> version 2.1.80, using the YANG Schema Mount <xref target="RFC8528"/>.
        It was manually edited to remove parts irrelevant to this document such as data nodes from imported modules, notifications and RPCs.
      </t>
      <t>
        In order to get a tree diagram involving YANG Schema Mount with yanglint, two data files are required, in addition to the YANG module, its dependencies and the YANG modules to be mounted.
        The first required file the extension data, containing the YANG library to use at the mount point, this file is provided below as "data-collection-extension-data.xml".
        The second required file is the YANG library to use at the top-level context, this file is provided below as "data-collection-toplevel-yanglib.xml".
        The following command was used to obtain the YANG Tree diagram (before manual edition).
      </t>
      <sourcecode type="bash">
        yanglint -f tree \
        -x data-collection-extension-data.xml \
        -Y data-collection-toplevel-yanglib.xml \
        example-collection-manifest@2025-02-21.yang
      </sourcecode>
      <sourcecode anchor="data-collection-extension-data" name="data-collection-extension-data.xml" type="xml" markers="true"><![CDATA[
{{data_extension_data}}
]]>
      </sourcecode>
      <sourcecode anchor="data-collection-toplevel-yanglib" name="data-collection-toplevel-yanglib.xml" type="xml" markers="true"><![CDATA[
{{data_toplevel_yanglib}}
]]>
      </sourcecode>
    </section>
    <section anchor="validate-example">
      <name>Validating the Example</name>
      <t>
        This section provides the command line for validating the example in <xref target="manifest-example"/> using <xref target="yanglint"/>.
        The files "data-collection-extension-data.xml" and "data-collection-toplevel-yanglib.xml" are provided in the previous section.
        The file "manifests-example.json" in the one from <xref target="manifest-example"/>.
      </t>
      <sourcecode type="bash">
yanglint -e -x data-collection-extension-data.xml \
        -Y data-collection-toplevel-yanglib.xml \
        manifests-example.json
      </sourcecode>

    </section>
    <section numbered="false">
      <name>Acknowledgements</name>
      <t>
          Thanks to Mohamed Boucadair, Tianran Zhou, Jan Lindblad, Ahmed Elhassany, Joe Clarke, Alex Huang Fang, Zhuoyao Lin and Quifang Ma for their reviews and comments.
       </t>
    </section>
  </back>
</rfc>
<!-- Local Variables: -->
<!-- fill-column:72 -->
<!-- End: -->